class Solution {
    static int[][] dp;
    static int knapsack(int W, int val[], int wt[]) {
        int n=wt.length;
        dp=new int[n+1][W+1];
        for(int i=0;i<=n;i++){
            for(int j=0;j<=W;j++){
                dp[i][j]=-1;
            }
        }
        return solve(W,val,wt, n);
    }
    static int solve(int W, int val[], int wt[], int n){
        if(n==0 || W==0){
            return 0;
        }
        if(dp[n][W]!=-1){
            return dp[n][W];
        }
        if(wt[n-1]<=W){
            int include=val[n-1]+solve(W-wt[n-1],val,wt,n-1);
            int exclude=solve(W,val,wt,n-1);
            dp[n][W]=Math.max(include,exclude);
        }else{
            return dp[n][W]=solve(W,val,wt,n-1);
        }
        return dp[n][W];
    }
}
