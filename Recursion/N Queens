class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> solutions=new ArrayList<>();
        Set<Integer>cols=new HashSet<>();
        Set<Integer>diag1=new HashSet<>();
        Set<Integer>diag2=new HashSet<>();
        char[][] board=new char[n][n];
        for(int i=0;i<n;i++){
            Arrays.fill(board[i],'.');
        }
        backtrack(0,board,solutions,cols,diag1,diag2,n);
        return solutions;
    }
    public void backtrack(int row, char[][] board, List<List<String>> solutions, Set<Integer>cols, Set<Integer>diag1, Set<Integer>diag2, int n){
        if(row==n){
            solutions.add(construct(board));
            return;
        }
        for(int col=0;col<n;col++){
            if(cols.contains(col) || diag1.contains(row-col) || diag2.contains(row+col)){
                continue;
            }
            board[row][col]='Q';
            cols.add(col);
            diag1.add(row-col);
            diag2.add(row+col);
            backtrack(row+1,board,solutions,cols,diag1,diag2,n);
            board[row][col]='.';
            cols.remove(col);
            diag1.remove(row-col);
            diag2.remove(row+col);
        }
    }
    private List<String> construct(char[][] board) {
        List<String> res = new ArrayList<>();
        for (char[] row : board) {
            res.add(new String(row));
        }
        return res;
    }
}
